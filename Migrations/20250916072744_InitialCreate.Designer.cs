// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Secondary_School_Portal.ProjectDatabase;

#nullable disable

namespace Secondary_School_Portal.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250916072744_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e617391d-5981-4288-84be-0e056cf83e78",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a10d6be0-932c-4473-bce8-9708c61f32b1",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "832e8eae-0f1f-4dbb-9c56-1c03f0562c1a",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "1b74e5be-e148-4ccf-a10f-c97cacea14a3",
                            Name = "Parent",
                            NormalizedName = "PARENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "be881d4d-28e6-434d-b6d7-1fedee8a910a",
                            RoleId = "e617391d-5981-4288-84be-0e056cf83e78"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.AcademicCalendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PdfFilePath")
                        .HasColumnType("longtext");

                    b.Property<int>("SessionYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UploadedById")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UploadedById");

                    b.ToTable("AcademicCalendars");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "be881d4d-28e6-434d-b6d7-1fedee8a910a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f619f56f-bc3b-48ee-8437-ba70a3bb7a80",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "System Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBlX9Zg25vwmayhV+NX28z5lta1+4h4JZi3ok1uTIdjkMqhUU03AjH56dhmTxot+ww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d958764-2ccb-4377-934b-02e1a41e79bb",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.Property<int>("StudentClassId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherId")
                        .HasColumnType("varchar(450)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("DueDate");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("StudentClassId", "Term", "Session");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId", "IsRead", "CreatedAt");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.ReportCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PdfFilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SessionYear")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UploadedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("ReportCards");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Result", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherId")
                        .HasColumnType("varchar(450)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.Property<string>("Session")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("CAScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("double");

                    b.Property<double>("ExamScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("double");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "SubjectId", "TeacherId", "Term", "Session");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("StudentId", "Term", "Session");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("AppUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("RegNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("StudentClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.HasIndex("RegNumber")
                        .IsUnique();

                    b.HasIndex("StudentClassId", "IsActive");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.StudentClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("StudentClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "JSS 1A"
                        },
                        new
                        {
                            Id = 3,
                            Name = "JSS 2A"
                        },
                        new
                        {
                            Id = 5,
                            Name = "JSS 3A"
                        },
                        new
                        {
                            Id = 7,
                            Name = "SS 1A"
                        },
                        new
                        {
                            Id = 9,
                            Name = "SS 2A"
                        },
                        new
                        {
                            Id = 11,
                            Name = "SS 3A"
                        });
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("StudentClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("StudentClassId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Basic Mathematics",
                            IsActive = true,
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = 2,
                            Description = "English Language and Literature",
                            IsActive = true,
                            Name = "English Language"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Basic Physics",
                            IsActive = true,
                            Name = "Physics"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Basic Chemistry",
                            IsActive = true,
                            Name = "Chemistry"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Basic Biology",
                            IsActive = true,
                            Name = "Biology"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Government Studies",
                            IsActive = true,
                            Name = "Government"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Basic Economics",
                            IsActive = true,
                            Name = "Economics"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Physical and Human Geography",
                            IsActive = true,
                            Name = "Geography"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Nigerian and World History",
                            IsActive = true,
                            Name = "History"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Basic Computer Studies",
                            IsActive = true,
                            Name = "Computer Science"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Introduction to Science for Junior Secondary",
                            IsActive = true,
                            Name = "Basic Science"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Introduction to Technology",
                            IsActive = true,
                            Name = "Basic Technology"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Foundations of Business and Commerce",
                            IsActive = true,
                            Name = "Business Studies"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Citizenship and Civic Responsibilities",
                            IsActive = true,
                            Name = "Civic Education"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Society and Human Relationships",
                            IsActive = true,
                            Name = "Social Studies"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Bible Knowledge and Christian Values",
                            IsActive = true,
                            Name = "Christian Religious Studies"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Quranic Knowledge and Islamic Values",
                            IsActive = true,
                            Name = "Islamic Religious Studies"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Health and Physical Fitness",
                            IsActive = true,
                            Name = "Physical and Health Education"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Introduction to Agriculture",
                            IsActive = true,
                            Name = "Agricultural Science"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Basic Home and Family Management",
                            IsActive = true,
                            Name = "Home Economics"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Drawing, Painting and Creative Arts",
                            IsActive = true,
                            Name = "Fine Arts"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Introduction to Music and Instruments",
                            IsActive = true,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Basic French Language",
                            IsActive = true,
                            Name = "French"
                        });
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.TeacherSubject", b =>
                {
                    b.Property<string>("TeacherId")
                        .HasColumnType("varchar(450)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("AssignedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int>("SessionYear")
                        .HasColumnType("int");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UnassignedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TeacherId", "SubjectId");

                    b.HasIndex("SubjectId", "IsActive", "SessionYear");

                    b.ToTable("TeacherSubjects");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.TimeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<int>("StudentClassId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherId")
                        .HasColumnType("varchar(450)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("StudentClassId", "Day", "StartTime")
                        .IsUnique();

                    b.HasIndex("TeacherId", "Day", "StartTime");

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Secondary_School_Portal.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Secondary_School_Portal.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Secondary_School_Portal.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Secondary_School_Portal.Models.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.AcademicCalendar", b =>
                {
                    b.HasOne("Secondary_School_Portal.Models.Entities.AppUser", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Announcement", b =>
                {
                    b.HasOne("Secondary_School_Portal.Models.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Assignment", b =>
                {
                    b.HasOne("Secondary_School_Portal.Models.Entities.StudentClass", "StudentClass")
                        .WithMany()
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Secondary_School_Portal.Models.Entities.Student", null)
                        .WithMany("Assignments")
                        .HasForeignKey("StudentId");

                    b.HasOne("Secondary_School_Portal.Models.Entities.Subject", "Subject")
                        .WithMany("Assignments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Teacher", "Teacher")
                        .WithMany("Assignments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("StudentClass");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Notification", b =>
                {
                    b.HasOne("Secondary_School_Portal.Models.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Parent", b =>
                {
                    b.HasOne("Secondary_School_Portal.Models.Entities.AppUser", "AppUser")
                        .WithOne("Parent")
                        .HasForeignKey("Secondary_School_Portal.Models.Entities.Parent", "AppUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.ReportCard", b =>
                {
                    b.HasOne("Secondary_School_Portal.Models.Entities.Student", "Student")
                        .WithMany("ReportCards")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Result", b =>
                {
                    b.HasOne("Secondary_School_Portal.Models.Entities.Student", "Student")
                        .WithMany("Results")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Secondary_School_Portal.Models.Entities.Subject", "Subject")
                        .WithMany("Results")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Teacher", "Teacher")
                        .WithMany("Results")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Student", b =>
                {
                    b.HasOne("Secondary_School_Portal.Models.Entities.AppUser", "AppUser")
                        .WithOne("Student")
                        .HasForeignKey("Secondary_School_Portal.Models.Entities.Student", "AppUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Secondary_School_Portal.Models.Entities.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Secondary_School_Portal.Models.Entities.StudentClass", "StudentClass")
                        .WithMany("Students")
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Parent");

                    b.Navigation("StudentClass");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Subject", b =>
                {
                    b.HasOne("Secondary_School_Portal.Models.Entities.StudentClass", null)
                        .WithMany("Subjects")
                        .HasForeignKey("StudentClassId");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.TeacherSubject", b =>
                {
                    b.HasOne("Secondary_School_Portal.Models.Entities.Subject", "Subject")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Teacher", "Teacher")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.TimeTable", b =>
                {
                    b.HasOne("Secondary_School_Portal.Models.Entities.StudentClass", "StudentClass")
                        .WithMany()
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Secondary_School_Portal.Models.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Teacher", "Teacher")
                        .WithMany("TimeTables")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("StudentClass");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Teacher", b =>
                {
                    b.HasOne("Secondary_School_Portal.Models.Entities.AppUser", "AppUser")
                        .WithOne("Teacher")
                        .HasForeignKey("Teacher", "AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.AppUser", b =>
                {
                    b.Navigation("Parent");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Parent", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Student", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("ReportCards");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.StudentClass", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Secondary_School_Portal.Models.Entities.Subject", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Results");

                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("Teacher", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Results");

                    b.Navigation("TeacherSubjects");

                    b.Navigation("TimeTables");
                });
#pragma warning restore 612, 618
        }
    }
}
